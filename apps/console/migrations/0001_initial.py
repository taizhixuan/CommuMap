# Generated by Django 5.0 on 2025-06-10 13:34

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_name', models.CharField(help_text='Name of the metric being recorded.', max_length=100)),
                ('metric_value', models.FloatField(help_text='Numeric value of the metric.')),
                ('metric_unit', models.CharField(help_text='Unit of measurement (e.g., MB, %, seconds).', max_length=20)),
                ('metric_category', models.CharField(choices=[('performance', 'Performance'), ('usage', 'Usage'), ('security', 'Security'), ('storage', 'Storage'), ('network', 'Network'), ('application', 'Application')], help_text='Category classification of the metric.', max_length=50)),
                ('tags', models.JSONField(default=dict, help_text='Additional tags for metric filtering and grouping.')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, help_text='When the metric was recorded.')),
            ],
            options={
                'verbose_name': 'System Metric',
                'verbose_name_plural': 'System Metrics',
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['metric_name', 'recorded_at'], name='console_sys_metric__d9517c_idx'), models.Index(fields=['metric_category', 'recorded_at'], name='console_sys_metric__2cb4ef_idx'), models.Index(fields=['recorded_at'], name='console_sys_recorde_3cce8d_idx')],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTask',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('backup', 'Database Backup'), ('cache_clear', 'Cache Clear'), ('log_rotation', 'Log Rotation'), ('feature_toggle', 'Feature Toggle'), ('system_update', 'System Update'), ('user_cleanup', 'User Data Cleanup'), ('service_reindex', 'Service Reindexing'), ('notification_cleanup', 'Notification Cleanup')], help_text='Type of maintenance task.', max_length=20)),
                ('title', models.CharField(help_text='Human-readable title for the task.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the task.')),
                ('parameters', models.JSONField(default=dict, help_text='Task-specific parameters and configuration.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the task.', max_length=20)),
                ('result_data', models.JSONField(default=dict, help_text='Task execution results and output data.')),
                ('error_message', models.TextField(blank=True, help_text='Error message if task failed.')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the task execution started.', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the task was completed.', null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, help_text='Task execution duration in seconds.', null=True)),
                ('initiated_by', models.ForeignKey(help_text='Admin who initiated the task.', on_delete=django.db.models.deletion.PROTECT, related_name='maintenance_tasks_initiated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Maintenance Task',
                'verbose_name_plural': 'Maintenance Tasks',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='console_mai_status_6485e2_idx'), models.Index(fields=['task_type', 'status'], name='console_mai_task_ty_f0a73e_idx'), models.Index(fields=['initiated_by', 'created_at'], name='console_mai_initiat_9ec35b_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('in_app', 'In-App'), ('system', 'System Alert'), ('emergency', 'Emergency Alert')], help_text='Type of notification.', max_length=20)),
                ('recipient_email', models.EmailField(blank=True, help_text='Recipient email address.', max_length=254)),
                ('recipient_phone', models.CharField(blank=True, help_text='Recipient phone number.', max_length=20)),
                ('subject', models.CharField(help_text='Notification subject/title.', max_length=200)),
                ('message', models.TextField(help_text='Notification message content.')),
                ('data', models.JSONField(default=dict, help_text='Additional notification data and metadata.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the notification.', max_length=20)),
                ('scheduled_for', models.DateTimeField(default=django.utils.timezone.now, help_text='When the notification should be sent.')),
                ('sent_at', models.DateTimeField(blank=True, help_text='When the notification was actually sent.', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if sending failed.')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts.')),
                ('recipient_user', models.ForeignKey(blank=True, help_text='Recipient user (for in-app notifications).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Queue',
                'verbose_name_plural': 'Notification Queue',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'scheduled_for'], name='console_not_status_9d431b_idx'), models.Index(fields=['notification_type', 'status'], name='console_not_notific_73ea16_idx'), models.Index(fields=['recipient_user', 'created_at'], name='console_not_recipie_20ee80_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemAnnouncement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the announcement.', max_length=200)),
                ('content', models.TextField(help_text='Rich text content of the announcement.')),
                ('announcement_type', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('emergency', 'Emergency'), ('maintenance', 'Maintenance')], default='info', help_text='Type of announcement.', max_length=20)),
                ('target_roles', models.JSONField(default=list, help_text='List of user roles to target (empty = all users).')),
                ('target_regions', models.JSONField(blank=True, default=list, help_text='Geographic regions to target (optional).')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the announcement is currently active.')),
                ('show_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When to start showing the announcement.')),
                ('show_until', models.DateTimeField(blank=True, help_text='When to stop showing the announcement (optional).', null=True)),
                ('is_urgent', models.BooleanField(default=False, help_text='Mark as urgent for prominent display.')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times the announcement has been viewed.')),
                ('created_by', models.ForeignKey(help_text='Admin who created the announcement.', on_delete=django.db.models.deletion.PROTECT, related_name='announcements_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Announcement',
                'verbose_name_plural': 'System Announcements',
                'ordering': ['-is_urgent', '-created_at'],
                'indexes': [models.Index(fields=['is_active', 'show_from', 'show_until'], name='console_sys_is_acti_5505f4_idx'), models.Index(fields=['announcement_type', 'is_active'], name='console_sys_announc_fdce24_idx'), models.Index(fields=['created_at'], name='console_sys_created_a92126_idx')],
            },
        ),
    ]
