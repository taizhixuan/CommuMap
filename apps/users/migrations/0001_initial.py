# Generated by Django 5.0 on 2025-06-09 11:27

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_location_lat', models.FloatField(blank=True, help_text="User's preferred location latitude", null=True, verbose_name='Preferred Location Latitude')),
                ('preferred_location_lng', models.FloatField(blank=True, help_text="User's preferred location longitude", null=True, verbose_name='Preferred Location Longitude')),
                ('search_radius_km', models.PositiveIntegerField(default=10, help_text='Default search radius in kilometers', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Search Radius (km)')),
                ('requires_wheelchair_access', models.BooleanField(default=False, verbose_name='Requires Wheelchair Access')),
                ('requires_sign_language', models.BooleanField(default=False, verbose_name='Requires Sign Language Support')),
                ('preferred_languages', models.JSONField(blank=True, default=list, help_text='List of preferred language codes', verbose_name='Preferred Languages')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('emergency_alerts', models.BooleanField(default=True, verbose_name='Emergency Alerts')),
                ('service_updates', models.BooleanField(default=False, verbose_name='Service Updates')),
                ('public_profile', models.BooleanField(default=False, verbose_name='Public Profile')),
                ('share_location', models.BooleanField(default=False, verbose_name='Share Location')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Bio')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'users_profile',
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query', models.CharField(max_length=200, verbose_name='Search Query')),
                ('search_location_lat', models.FloatField(blank=True, null=True, verbose_name='Search Location Latitude')),
                ('search_location_lng', models.FloatField(blank=True, null=True, verbose_name='Search Location Longitude')),
                ('search_radius_km', models.PositiveIntegerField(blank=True, null=True, verbose_name='Search Radius (km)')),
                ('category_filter', models.CharField(blank=True, max_length=100, verbose_name='Category Filter')),
                ('results_count', models.PositiveIntegerField(default=0, verbose_name='Results Count')),
                ('clicked_service_id', models.UUIDField(blank=True, null=True, verbose_name='Clicked Service ID')),
                ('session_id', models.CharField(max_length=40, verbose_name='Session ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_history', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Search History',
                'verbose_name_plural': 'Search Histories',
                'db_table': 'users_search_history',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='users_searc_user_id_3eef2b_idx'), models.Index(fields=['session_id', '-created_at'], name='users_searc_session_7678c2_idx'), models.Index(fields=['query'], name='users_searc_query_fad031_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceBookmark',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True, help_text='Personal notes about this service', max_length=500, verbose_name='Notes')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='Is Favorite')),
                ('priority', models.PositiveSmallIntegerField(default=1, help_text='Priority level (1=Low, 5=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Priority')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='services.service', verbose_name='Service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Service Bookmark',
                'verbose_name_plural': 'Service Bookmarks',
                'db_table': 'users_bookmark',
                'ordering': ['-priority', '-created_at'],
                'unique_together': {('user', 'service')},
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('service_update', 'Service Update'), ('emergency_alert', 'Emergency Alert'), ('bookmark_update', 'Bookmark Update'), ('system_announcement', 'System Announcement'), ('welcome', 'Welcome Message'), ('reminder', 'Reminder')], default='system_announcement', max_length=20, verbose_name='Notification Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('message', models.TextField(verbose_name='Message')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Read At')),
                ('action_url', models.URLField(blank=True, help_text='URL for notification action', verbose_name='Action URL')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this notification expires', null=True, verbose_name='Expires At')),
                ('related_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to='services.service', verbose_name='Related Service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Notification',
                'verbose_name_plural': 'User Notifications',
                'db_table': 'users_notification',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read', '-created_at'], name='users_notif_user_id_f3f50a_idx'), models.Index(fields=['notification_type', '-created_at'], name='users_notif_notific_589b34_idx'), models.Index(fields=['priority', '-created_at'], name='users_notif_priorit_625ab0_idx')],
            },
        ),
    ]
