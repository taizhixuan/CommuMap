# Generated by Django 5.0 on 2025-06-09 11:27

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly category identifier', max_length=100, unique=True)),
                ('category_type', models.CharField(choices=[('healthcare', 'Healthcare & Medical'), ('shelter', 'Shelter & Housing'), ('food', 'Food & Nutrition'), ('education', 'Education & Learning'), ('emergency', 'Emergency Services'), ('social', 'Social Services'), ('employment', 'Employment & Training'), ('legal', 'Legal Aid'), ('transportation', 'Transportation'), ('utilities', 'Utilities & Basic Needs'), ('recreation', 'Recreation & Community'), ('other', 'Other Services')], help_text='Primary category type', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text='Icon class for UI display', max_length=50)),
                ('color', models.CharField(default='#3B82F6', help_text='Hex color code for category', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is available for use')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers first)')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['category_type', 'is_active'], name='services_se_categor_a8e87d_idx'), models.Index(fields=['sort_order'], name='services_se_sort_or_ac189b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Service name', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly service identifier', max_length=250, unique=True)),
                ('description', models.TextField(help_text='Detailed service description')),
                ('short_description', models.CharField(help_text='Brief service summary for listings', max_length=300)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Additional searchable tags')),
                ('latitude', models.FloatField(help_text='Service location latitude')),
                ('longitude', models.FloatField(help_text='Service location longitude')),
                ('address', models.CharField(help_text='Physical address', max_length=300)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20)),
                ('city', models.CharField(help_text='City name', max_length=100)),
                ('state_province', models.CharField(help_text='State or province', max_length=100)),
                ('country', models.CharField(default='United States', help_text='Country name', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Primary phone number', max_length=20)),
                ('phone_alt', models.CharField(blank=True, help_text='Alternative phone number', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('website', models.URLField(blank=True, help_text='Official website URL')),
                ('hours_of_operation', models.JSONField(default=dict, help_text='Weekly operating hours by day')),
                ('is_24_7', models.BooleanField(default=False, help_text='Open 24 hours, 7 days a week')),
                ('seasonal_info', models.TextField(blank=True, help_text='Seasonal operation details')),
                ('max_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum service capacity', null=True)),
                ('current_capacity', models.PositiveIntegerField(default=0, help_text='Current occupancy/usage')),
                ('capacity_last_updated', models.DateTimeField(auto_now=True, help_text='When capacity was last updated')),
                ('is_emergency_service', models.BooleanField(default=False, help_text='Available during emergencies')),
                ('requires_appointment', models.BooleanField(default=False, help_text='Requires advance appointment')),
                ('accepts_walk_ins', models.BooleanField(default=True, help_text='Accepts walk-in clients')),
                ('is_free', models.BooleanField(default=True, help_text='Service is provided free of charge')),
                ('cost_info', models.TextField(blank=True, help_text='Cost and payment information')),
                ('eligibility_criteria', models.TextField(blank=True, help_text='Who is eligible for this service')),
                ('required_documents', models.TextField(blank=True, help_text='Required documentation')),
                ('age_restrictions', models.CharField(blank=True, help_text='Age restrictions (e.g., "18+", "Children only")', max_length=100)),
                ('is_verified', models.BooleanField(default=False, help_text='Service has been verified by moderators')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When service was verified', null=True)),
                ('current_status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('temp_closed', 'Temporarily Closed'), ('full', 'At Capacity'), ('limited', 'Limited Availability'), ('emergency', 'Emergency Only')], default='open', help_text='Current operational status', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Service is active and visible to users')),
                ('quality_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Quality score based on feedback (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.PositiveIntegerField(default=0, help_text='Total number of ratings received')),
                ('search_vector', models.TextField(blank=True, help_text='Pre-computed search text for full-text search')),
                ('manager', models.ForeignKey(blank=True, help_text='Service manager responsible for updates', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_services', to=settings.AUTH_USER_MODEL)),
                ('status_updated_by', models.ForeignKey(blank=True, help_text='User who last updated status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_updates', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Moderator who verified this service', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_services', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='Primary service category', on_delete=django.db.models.deletion.PROTECT, related_name='services', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RealTimeStatusUpdate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('change_type', models.CharField(choices=[('status', 'Status Change'), ('capacity', 'Capacity Update'), ('hours', 'Hours Change'), ('emergency', 'Emergency Alert'), ('closure', 'Temporary Closure'), ('reopening', 'Reopening')], help_text='Type of status change', max_length=20)),
                ('old_status', models.CharField(blank=True, choices=[('open', 'Open'), ('closed', 'Closed'), ('temp_closed', 'Temporarily Closed'), ('full', 'At Capacity'), ('limited', 'Limited Availability'), ('emergency', 'Emergency Only')], help_text='Previous status', max_length=20)),
                ('new_status', models.CharField(blank=True, choices=[('open', 'Open'), ('closed', 'Closed'), ('temp_closed', 'Temporarily Closed'), ('full', 'At Capacity'), ('limited', 'Limited Availability'), ('emergency', 'Emergency Only')], help_text='New status', max_length=20)),
                ('old_capacity', models.PositiveIntegerField(blank=True, help_text='Previous capacity', null=True)),
                ('new_capacity', models.PositiveIntegerField(blank=True, help_text='New capacity', null=True)),
                ('message', models.TextField(blank=True, help_text='Optional update message')),
                ('notifications_sent', models.BooleanField(default=False, help_text='Whether notifications have been sent')),
                ('notification_count', models.PositiveIntegerField(default=0, help_text='Number of notifications sent')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional update context')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who made the update', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_updates', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Service being updated', on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='services.service')),
            ],
            options={
                'verbose_name': 'Real-time Status Update',
                'verbose_name_plural': 'Real-time Status Updates',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['service', 'change_type', 'created_at'], name='services_re_service_0fed25_idx'), models.Index(fields=['notifications_sent'], name='services_re_notific_4ed110_idx'), models.Index(fields=['created_at'], name='services_re_created_62573c_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceAlert',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('urgent', 'Urgent'), ('closure', 'Temporary Closure'), ('capacity', 'Capacity Alert'), ('schedule', 'Schedule Change')], help_text='Type of alert', max_length=20)),
                ('title', models.CharField(help_text='Alert title', max_length=200)),
                ('message', models.TextField(help_text='Alert message content')),
                ('is_active', models.BooleanField(default=True, help_text='Alert is currently active')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, help_text='When alert becomes active')),
                ('end_time', models.DateTimeField(blank=True, help_text='When alert expires (null = no expiration)', null=True)),
                ('priority', models.PositiveIntegerField(default=1, help_text='Alert priority (1=low, 5=critical)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('show_on_map', models.BooleanField(default=True, help_text='Show alert indicator on map')),
                ('requires_acknowledgment', models.BooleanField(default=False, help_text='Users must acknowledge before accessing service')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this alert', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_alerts', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Service this alert relates to', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='services.service')),
            ],
            options={
                'verbose_name': 'Service Alert',
                'verbose_name_plural': 'Service Alerts',
                'ordering': ['-priority', '-created_at'],
                'indexes': [models.Index(fields=['service', 'is_active', 'start_time'], name='services_se_service_f4ce6f_idx'), models.Index(fields=['alert_type', 'priority'], name='services_se_alert_t_8678bc_idx'), models.Index(fields=['end_time'], name='services_se_end_tim_216855_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['category', 'is_active', 'is_verified'], name='services_se_categor_d0ee76_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['current_status', 'is_emergency_service'], name='services_se_current_ab7fbf_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['city', 'state_province'], name='services_se_city_cec12a_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_verified', 'is_active'], name='services_se_is_veri_25158d_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['quality_score'], name='services_se_quality_c565e2_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['manager'], name='services_se_manager_1732ec_idx'),
        ),
    ]
