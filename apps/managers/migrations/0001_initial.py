# Generated by Django 5.0 on 2025-06-10 05:45

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ManagerNotification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('capacity_alert', 'Capacity Alert'), ('service_approved', 'Service Approved'), ('service_rejected', 'Service Rejected'), ('feedback_received', 'New Feedback'), ('comment_posted', 'New Comment'), ('system_announcement', 'System Announcement'), ('verification_required', 'Verification Required'), ('status_reminder', 'Status Update Reminder')], help_text='Type of notification', max_length=25)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message content')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', help_text='Notification priority', max_length=10)),
                ('is_read', models.BooleanField(default=False, help_text='Whether notification has been read')),
                ('read_at', models.DateTimeField(blank=True, help_text='When notification was read', null=True)),
                ('action_url', models.URLField(blank=True, help_text='URL for notification action')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When notification expires', null=True)),
                ('manager', models.ForeignKey(help_text='Service manager receiving this notification', on_delete=django.db.models.deletion.CASCADE, related_name='manager_notifications', to=settings.AUTH_USER_MODEL)),
                ('related_service', models.ForeignKey(blank=True, help_text='Related service if applicable', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manager_notifications', to='services.service')),
            ],
            options={
                'verbose_name': 'Manager Notification',
                'verbose_name_plural': 'Manager Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['manager', '-created_at'], name='managers_ma_manager_76cfec_idx'), models.Index(fields=['manager', 'is_read'], name='managers_ma_manager_7c3867_idx'), models.Index(fields=['priority', '-created_at'], name='managers_ma_priorit_833394_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceAnalytics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date for these analytics')),
                ('total_visits', models.PositiveIntegerField(default=0, help_text='Total visits on this date')),
                ('unique_visitors', models.PositiveIntegerField(default=0, help_text='Unique visitors on this date')),
                ('total_bookmarks', models.PositiveIntegerField(default=0, help_text='Total bookmarks added on this date')),
                ('feedback_count', models.PositiveIntegerField(default=0, help_text='Feedback submissions on this date')),
                ('comment_count', models.PositiveIntegerField(default=0, help_text='Comments posted on this date')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating for this date', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0, help_text='Number of ratings received on this date')),
                ('average_capacity', models.DecimalField(decimal_places=2, default=0.0, help_text='Average capacity percentage for this date', max_digits=5)),
                ('max_capacity_reached', models.PositiveIntegerField(default=0, help_text='Maximum capacity reached on this date')),
                ('peak_hours', models.JSONField(blank=True, default=dict, help_text='Peak usage hours as {hour: visit_count}')),
                ('service', models.ForeignKey(help_text='Service these analytics belong to', on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='services.service')),
            ],
            options={
                'verbose_name': 'Service Analytics',
                'verbose_name_plural': 'Service Analytics',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['service', '-date'], name='managers_se_service_0e26c1_idx'), models.Index(fields=['date'], name='managers_se_date_9b13de_idx')],
                'unique_together': {('service', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ServiceStatusHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('change_type', models.CharField(choices=[('status', 'Status Change'), ('capacity', 'Capacity Update'), ('alert_created', 'Alert Created'), ('alert_expired', 'Alert Expired'), ('hours_updated', 'Hours Updated'), ('emergency_toggle', 'Emergency Status Toggle')], help_text='Type of change made', max_length=20)),
                ('old_value', models.TextField(blank=True, help_text='Previous value (JSON or text)')),
                ('new_value', models.TextField(blank=True, help_text='New value (JSON or text)')),
                ('description', models.TextField(blank=True, help_text='Description of the change')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the change', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('manager', models.ForeignKey(blank=True, help_text='Manager who made the change', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_status_changes', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Service that was modified', on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='services.service')),
            ],
            options={
                'verbose_name': 'Service Status History',
                'verbose_name_plural': 'Service Status Histories',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['service', '-created_at'], name='managers_se_service_82b654_idx'), models.Index(fields=['manager', '-created_at'], name='managers_se_manager_701579_idx'), models.Index(fields=['change_type', '-created_at'], name='managers_se_change__61c788_idx')],
            },
        ),
    ]
