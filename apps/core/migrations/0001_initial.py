# Generated by Django 5.0 on 2025-06-09 11:26

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Enable maintenance mode to restrict access.')),
                ('system_announcement', models.TextField(blank=True, help_text='System-wide announcement displayed to all users.')),
                ('announcement_active', models.BooleanField(default=False, help_text='Whether to display the system announcement.')),
                ('registration_enabled', models.BooleanField(default=True, help_text='Allow new user registrations.')),
                ('service_submissions_enabled', models.BooleanField(default=True, help_text='Allow new service submissions.')),
                ('emergency_mode', models.BooleanField(default=False, help_text='Emergency mode - prioritize emergency services.')),
                ('default_map_center_lat', models.FloatField(default=40.7128, help_text='Default map center latitude.')),
                ('default_map_center_lng', models.FloatField(default=-74.006, help_text='Default map center longitude.')),
                ('default_map_zoom', models.PositiveIntegerField(default=12, help_text='Default map zoom level.')),
                ('emergency_search_radius_km', models.PositiveIntegerField(default=5, help_text='Default emergency search radius in kilometers.')),
                ('auto_approve_services', models.BooleanField(default=False, help_text='Automatically approve new service submissions.')),
                ('auto_approve_comments', models.BooleanField(default=False, help_text='Automatically approve new comments.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('role', models.CharField(choices=[('user', 'User'), ('service_manager', 'Service Manager'), ('community_moderator', 'Community Moderator'), ('admin', 'Admin')], default='user', help_text='User role determines access permissions.', max_length=20)),
                ('full_name', models.CharField(blank=True, help_text='Full name for display purposes.', max_length=150)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number.', max_length=20)),
                ('preferred_location_lat', models.FloatField(blank=True, help_text="User's preferred location latitude.", null=True)),
                ('preferred_location_lng', models.FloatField(blank=True, help_text="User's preferred location longitude.", null=True)),
                ('search_radius_km', models.PositiveIntegerField(default=10, help_text='Default search radius in kilometers.')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user account has been verified.')),
                ('verification_requested_at', models.DateTimeField(blank=True, help_text='When verification was requested for service managers/moderators.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('user_created', 'User Created'), ('user_verified', 'User Verified'), ('user_role_changed', 'User Role Changed'), ('service_created', 'Service Created'), ('service_updated', 'Service Updated'), ('service_approved', 'Service Approved'), ('service_rejected', 'Service Rejected'), ('emergency_toggled', 'Emergency Status Toggled'), ('system_settings_changed', 'System Settings Changed'), ('maintenance_mode_toggled', 'Maintenance Mode Toggled')], help_text='Type of action performed.', max_length=50)),
                ('description', models.TextField(help_text='Detailed description of the action.')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the action was performed.', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from the browser.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional context data about the action.')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'is_verified'], name='core_user_role_5782b8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='core_user_email_38052c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_active'], name='core_user_last_ac_f318ec_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action', 'created_at'], name='core_auditl_action_29a2bf_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'created_at'], name='core_auditl_user_id_413764_idx'),
        ),
    ]
