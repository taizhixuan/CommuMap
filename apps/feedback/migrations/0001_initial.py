# Generated by Django 5.0 on 2025-06-09 13:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceComment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(help_text='Comment content')),
                ('is_approved', models.BooleanField(default=False, help_text='Comment has been approved for public display')),
                ('is_flagged', models.BooleanField(default=False, help_text='Comment has been flagged for moderation')),
                ('is_edited', models.BooleanField(default=False, help_text='Comment has been edited')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When comment was approved', null=True)),
                ('like_count', models.PositiveIntegerField(default=0, help_text='Number of likes')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Moderator who approved this comment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent comment for threading', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='feedback.servicecomment')),
                ('service', models.ForeignKey(help_text='Service being discussed', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='services.service')),
                ('user', models.ForeignKey(help_text='User who posted the comment', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Service Comment',
                'verbose_name_plural': 'Service Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(help_text='User who liked the comment', on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(help_text='Comment being liked', on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='feedback.servicecomment')),
            ],
            options={
                'verbose_name': 'Comment Like',
                'verbose_name_plural': 'Comment Likes',
            },
        ),
        migrations.CreateModel(
            name='ServiceReview',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Star rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Review title', max_length=200)),
                ('content', models.TextField(help_text='Detailed review content')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Review category tags')),
                ('visit_date', models.DateField(blank=True, help_text='Date of service visit', null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Review has been verified as legitimate')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Hide reviewer name from public display')),
                ('is_flagged', models.BooleanField(default=False, help_text='Review has been flagged for moderation')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When review was approved', null=True)),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of "helpful" votes')),
                ('unhelpful_count', models.PositiveIntegerField(default=0, help_text='Number of "unhelpful" votes')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Moderator who approved this review', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reviews', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Service being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='services.service')),
                ('user', models.ForeignKey(help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Service Review',
                'verbose_name_plural': 'Service Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpfulVote',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_helpful', models.BooleanField(help_text='True for helpful, False for unhelpful')),
                ('user', models.ForeignKey(help_text='User casting the vote', on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(help_text='Review being voted on', on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='feedback.servicereview')),
            ],
            options={
                'verbose_name': 'Review Vote',
                'verbose_name_plural': 'Review Votes',
            },
        ),
        migrations.CreateModel(
            name='FlaggedContent',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('offensive', 'Offensive Language'), ('harassment', 'Harassment'), ('misinformation', 'Misinformation'), ('off_topic', 'Off Topic'), ('duplicate', 'Duplicate Content'), ('other', 'Other')], help_text='Reason for flagging', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Additional details about the flag')),
                ('is_resolved', models.BooleanField(default=False, help_text='Flag has been reviewed and resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When flag was resolved', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Moderator notes on resolution')),
                ('flagged_by', models.ForeignKey(help_text='User who submitted the flag', on_delete=django.db.models.deletion.CASCADE, related_name='flags_submitted', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, help_text='Moderator who resolved this flag', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flags_resolved', to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(blank=True, help_text='Flagged comment', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='feedback.servicecomment')),
                ('review', models.ForeignKey(blank=True, help_text='Flagged review', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='feedback.servicereview')),
            ],
            options={
                'verbose_name': 'Flagged Content',
                'verbose_name_plural': 'Flagged Content',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='servicecomment',
            index=models.Index(fields=['service', 'created_at'], name='feedback_se_service_be07c6_idx'),
        ),
        migrations.AddIndex(
            model_name='servicecomment',
            index=models.Index(fields=['parent', 'created_at'], name='feedback_se_parent__e073a5_idx'),
        ),
        migrations.AddIndex(
            model_name='servicecomment',
            index=models.Index(fields=['is_approved', 'is_flagged'], name='feedback_se_is_appr_e1cb2b_idx'),
        ),
        migrations.AddIndex(
            model_name='commentlike',
            index=models.Index(fields=['comment', 'user'], name='feedback_co_comment_23b2eb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentlike',
            unique_together={('comment', 'user')},
        ),
        migrations.AddIndex(
            model_name='servicereview',
            index=models.Index(fields=['service', 'rating'], name='feedback_se_service_fc1e03_idx'),
        ),
        migrations.AddIndex(
            model_name='servicereview',
            index=models.Index(fields=['user', '-created_at'], name='feedback_se_user_id_1effc2_idx'),
        ),
        migrations.AddIndex(
            model_name='servicereview',
            index=models.Index(fields=['is_verified', 'is_flagged'], name='feedback_se_is_veri_875509_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicereview',
            unique_together={('service', 'user')},
        ),
        migrations.AddIndex(
            model_name='reviewhelpfulvote',
            index=models.Index(fields=['review', 'is_helpful'], name='feedback_re_review__478b52_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpfulvote',
            unique_together={('review', 'user')},
        ),
        migrations.AddIndex(
            model_name='flaggedcontent',
            index=models.Index(fields=['is_resolved', 'created_at'], name='feedback_fl_is_reso_de67df_idx'),
        ),
        migrations.AddIndex(
            model_name='flaggedcontent',
            index=models.Index(fields=['reason', 'is_resolved'], name='feedback_fl_reason_6a16ca_idx'),
        ),
    ]
